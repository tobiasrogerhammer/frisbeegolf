{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/programming/graph/frisbee-graph/src/App.js\";\nimport React from 'react';\nimport 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from 'react-chartjs-2';\nimport { LinearScale, CategoryScale, PointElement, LineElement, Chart } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FrisbeeGolfGraph = _ref => {\n  let {\n    datasets\n  } = _ref;\n  Chart.register(LinearScale, CategoryScale, PointElement, LineElement);\n  const chartData = {\n    labels: datasets[0].data.map((item, index) => `Hole ${index + 1}`),\n    datasets: datasets.map((dataset, index) => ({\n      label: dataset.label,\n      data: dataset.data,\n      borderColor: getLineColor(index),\n      // Change line color dynamically\n      borderWidth: 1,\n      fill: false\n    }))\n  };\n  const chartOptions = {\n    scales: {\n      y: {\n        type: 'linear',\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Scores'\n        },\n        ticks: {\n          stepSize: 1 // Set step size to 1 to use only integer values\n        }\n      },\n\n      x: {\n        title: {\n          display: true,\n          text: 'Holes'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n\n// Helper function to get line color based on index\n_c = FrisbeeGolfGraph;\nconst getLineColor = index => {\n  const colors = ['red', 'blue', 'green', 'orange']; // Add more colors if needed\n  return colors[index % colors.length];\n};\nconst App = () => {\n  const dataset1 = {\n    label: 'Par',\n    data: [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  };\n  const dataset2 = {\n    label: 'Player 2',\n    data: [3, 3, 5, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 4, 2, 2, 3]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ekeberg Frisbee Golf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FrisbeeGolfGraph, {\n      datasets: [dataset1, dataset2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"FrisbeeGolfGraph\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","Line","LinearScale","CategoryScale","PointElement","LineElement","Chart","jsxDEV","_jsxDEV","FrisbeeGolfGraph","_ref","datasets","register","chartData","labels","data","map","item","index","dataset","label","borderColor","getLineColor","borderWidth","fill","chartOptions","scales","y","type","beginAtZero","title","display","text","ticks","stepSize","x","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","colors","length","App","dataset1","dataset2","children","_c2","$RefreshReg$"],"sources":["/Users/admin/Documents/programming/graph/frisbee-graph/src/App.js"],"sourcesContent":["import React from 'react';\nimport 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from 'react-chartjs-2';\nimport { LinearScale, CategoryScale, PointElement, LineElement, Chart } from 'chart.js';\n\nconst FrisbeeGolfGraph = ({ datasets }) => {\n  Chart.register(LinearScale, CategoryScale, PointElement, LineElement);\n\n  const chartData = {\n    labels: datasets[0].data.map((item, index) => `Hole ${index + 1}`),\n    datasets: datasets.map((dataset, index) => ({\n      label: dataset.label,\n      data: dataset.data,\n      borderColor: getLineColor(index), // Change line color dynamically\n      borderWidth: 1,\n      fill: false,\n    })),\n  };\n\n  const chartOptions = {\n    scales: {\n      y: {\n        type: 'linear',\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Scores',\n        },\n        ticks: {\n          stepSize: 1, // Set step size to 1 to use only integer values\n        },\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Holes',\n        },\n      },\n    },\n  };\n\n  return <Line data={chartData} options={chartOptions} />;\n};\n\n// Helper function to get line color based on index\nconst getLineColor = (index) => {\n  const colors = ['red', 'blue', 'green', 'orange']; // Add more colors if needed\n  return colors[index % colors.length];\n};\n\nconst App = () => {\n  const dataset1 = {\n    label: 'Par',\n    data: [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n  };\n\n  const dataset2 = {\n    label: 'Player 2',\n    data: [3, 3, 5, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 4, 2, 2, 3],\n  };\n\n  return (\n    <div>\n      <h1>Ekeberg Frisbee Golf</h1>\n      <FrisbeeGolfGraph datasets={[dataset1, dataset2]} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,UAAU;AACjB,OAAO,0BAA0B;AACjC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,WAAW,EAAEC,aAAa,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExF,MAAMC,gBAAgB,GAAGC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EACpCJ,KAAK,CAACM,QAAQ,CAACV,WAAW,EAAEC,aAAa,EAAEC,YAAY,EAAEC,WAAW,CAAC;EAErE,MAAMQ,SAAS,GAAG;IAChBC,MAAM,EAAEH,QAAQ,CAAC,CAAC,CAAC,CAACI,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAM,QAAOA,KAAK,GAAG,CAAE,EAAC,CAAC;IAClEP,QAAQ,EAAEA,QAAQ,CAACK,GAAG,CAAC,CAACG,OAAO,EAAED,KAAK,MAAM;MAC1CE,KAAK,EAAED,OAAO,CAACC,KAAK;MACpBL,IAAI,EAAEI,OAAO,CAACJ,IAAI;MAClBM,WAAW,EAAEC,YAAY,CAACJ,KAAK,CAAC;MAAE;MAClCK,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAG;IACnBC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE,QAAQ;QACdC,WAAW,EAAE,IAAI;QACjBC,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR,CAAC;QACDC,KAAK,EAAE;UACLC,QAAQ,EAAE,CAAC,CAAE;QACf;MACF,CAAC;;MACDC,CAAC,EAAE;QACDL,KAAK,EAAE;UACLC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;QACR;MACF;IACF;EACF,CAAC;EAED,oBAAOxB,OAAA,CAACP,IAAI;IAACc,IAAI,EAAEF,SAAU;IAACuB,OAAO,EAAEX;EAAa;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzD,CAAC;;AAED;AAAAC,EAAA,GAvCMhC,gBAAgB;AAwCtB,MAAMa,YAAY,GAAIJ,KAAK,IAAK;EAC9B,MAAMwB,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;EACnD,OAAOA,MAAM,CAACxB,KAAK,GAAGwB,MAAM,CAACC,MAAM,CAAC;AACtC,CAAC;AAED,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,QAAQ,GAAG;IACfzB,KAAK,EAAE,KAAK;IACZL,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;EAC7D,CAAC;EAED,MAAM+B,QAAQ,GAAG;IACf1B,KAAK,EAAE,UAAU;IACjBL,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;EAC7D,CAAC;EAED,oBACEP,OAAA;IAAAuC,QAAA,gBACEvC,OAAA;MAAAuC,QAAA,EAAI;IAAoB;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BhC,OAAA,CAACC,gBAAgB;MAACE,QAAQ,EAAE,CAACkC,QAAQ,EAAEC,QAAQ;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV,CAAC;AAACQ,GAAA,GAjBIJ,GAAG;AAmBT,eAAeA,GAAG;AAAC,IAAAH,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}