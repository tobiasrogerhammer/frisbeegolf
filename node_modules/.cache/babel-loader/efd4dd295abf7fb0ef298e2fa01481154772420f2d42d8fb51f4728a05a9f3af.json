{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/programming/graph/frisbee-graph/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from 'react-chartjs-2';\nimport { LinearScale, CategoryScale, PointElement, LineElement, Chart } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FrisbeeGolfGraph = _ref => {\n  let {\n    datasets,\n    onScoreChange\n  } = _ref;\n  Chart.register(LinearScale, CategoryScale, PointElement, LineElement);\n  const totalPar = datasets[0].data.reduce((acc, score) => acc + score, 0);\n  const totalScore = datasets.slice(1).reduce((acc, dataset) => {\n    return acc + dataset.data.reduce((sum, score) => sum + score, 0);\n  }, 0);\n  const chartData = {\n    labels: datasets[0].data.map((item, index) => `Hole ${index + 1}`),\n    datasets: datasets.map((dataset, index) => ({\n      label: dataset.label,\n      data: dataset.data,\n      borderColor: getLineColor(index),\n      borderWidth: 1,\n      fill: false\n    }))\n  };\n  const handleScoreUpdate = (index, score) => {\n    onScoreChange(index, score);\n  };\n  const chartOptions = {\n    scales: {\n      y: {\n        type: 'linear',\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Scores'\n        },\n        ticks: {\n          stepSize: 1\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Holes'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Total Par: \", totalPar]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Total Score: \", totalScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: datasets[1].data.map((score, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: score,\n        onChange: e => handleScoreUpdate(index, parseInt(e.target.value)),\n        disabled: index === 0 // Disable input for par values\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get line color based on index\n_c = FrisbeeGolfGraph;\nconst getLineColor = index => {\n  const colors = ['red', 'blue', 'green', 'orange']; // Add more colors if needed\n  return colors[index % colors.length];\n};\nconst App = () => {\n  _s();\n  const parData = [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3];\n  const [userScores, setUserScores] = useState([...parData]); // Initialize user scores with par values\n\n  const handleScoreChange = (index, score) => {\n    const updatedScores = [...userScores];\n    updatedScores[index] = score;\n    setUserScores(updatedScores);\n  };\n  const dataset1 = {\n    label: 'Par',\n    data: parData\n  };\n  const dataset2 = {\n    label: 'User',\n    data: userScores\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ekeberg Frisbee Golf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FrisbeeGolfGraph, {\n      datasets: [dataset1, dataset2],\n      onScoreChange: handleScoreChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: userScores.map((score, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: score,\n        onChange: e => handleScoreChange(index, parseInt(e.target.value))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aDYM9tdliSgzYOUCbaB78OxabRA=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"FrisbeeGolfGraph\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","Line","LinearScale","CategoryScale","PointElement","LineElement","Chart","jsxDEV","_jsxDEV","FrisbeeGolfGraph","_ref","datasets","onScoreChange","register","totalPar","data","reduce","acc","score","totalScore","slice","dataset","sum","chartData","labels","map","item","index","label","borderColor","getLineColor","borderWidth","fill","handleScoreUpdate","chartOptions","scales","y","type","beginAtZero","title","display","text","ticks","stepSize","x","children","fileName","_jsxFileName","lineNumber","columnNumber","options","value","onChange","e","parseInt","target","disabled","_c","colors","length","App","_s","parData","userScores","setUserScores","handleScoreChange","updatedScores","dataset1","dataset2","_c2","$RefreshReg$"],"sources":["/Users/admin/Documents/programming/graph/frisbee-graph/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from 'react-chartjs-2';\nimport { LinearScale, CategoryScale, PointElement, LineElement, Chart } from 'chart.js';\n\nconst FrisbeeGolfGraph = ({ datasets, onScoreChange }) => {\n  Chart.register(LinearScale, CategoryScale, PointElement, LineElement);\n\n  const totalPar = datasets[0].data.reduce((acc, score) => acc + score, 0);\n  const totalScore = datasets.slice(1).reduce((acc, dataset) => {\n    return acc + dataset.data.reduce((sum, score) => sum + score, 0);\n  }, 0);\n\n  const chartData = {\n    labels: datasets[0].data.map((item, index) => `Hole ${index + 1}`),\n    datasets: datasets.map((dataset, index) => ({\n      label: dataset.label,\n      data: dataset.data,\n      borderColor: getLineColor(index),\n      borderWidth: 1,\n      fill: false,\n    })),\n  };\n  const handleScoreUpdate = (index, score) => {\n    onScoreChange(index, score);\n  }\n\n  const chartOptions = {\n    scales: {\n      y: {\n        type: 'linear',\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Scores',\n        },\n        ticks: {\n          stepSize: 1,\n        },\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Holes',\n        },\n      },\n    },\n  };\n\n  return (\n    <div>\n      <div>Total Par: {totalPar}</div>\n      <div>Total Score: {totalScore}</div>\n      <Line data={chartData} options={chartOptions} />\n      <div>\n        {datasets[1].data.map((score, index) => (\n          <input\n            key={index}\n            type=\"number\"\n            value={score}\n            onChange={(e) => handleScoreUpdate(index, parseInt(e.target.value))}\n            disabled={index === 0} // Disable input for par values\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n\n// Helper function to get line color based on index\nconst getLineColor = (index) => {\n  const colors = ['red', 'blue', 'green', 'orange']; // Add more colors if needed\n  return colors[index % colors.length];\n};\n\nconst App = () => {\n  const parData = [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3];\n\n  const [userScores, setUserScores] = useState([...parData]); // Initialize user scores with par values\n\n  const handleScoreChange = (index, score) => {\n    const updatedScores = [...userScores];\n    updatedScores[index] = score;\n    setUserScores(updatedScores);\n  };\n\n  const dataset1 = {\n    label: 'Par',\n    data: parData,\n  };\n\n  const dataset2 = {\n    label: 'User',\n    data: userScores,\n  };\n\n  return (\n    <div>\n      <h1>Ekeberg Frisbee Golf</h1>\n      <FrisbeeGolfGraph datasets={[dataset1, dataset2]} onScoreChange={handleScoreChange} />\n      <div>\n        {userScores.map((score, index) => (\n          <input\n            key={index}\n            type=\"number\"\n            value={score}\n            onChange={(e) => handleScoreChange(index, parseInt(e.target.value))}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}