{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/programming/graph/frisbee-graph/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from 'react-chartjs-2';\nimport { LinearScale, CategoryScale, PointElement, LineElement, Chart } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FrisbeeGolfGraph = _ref => {\n  let {\n    datasets\n  } = _ref;\n  Chart.register(LinearScale, CategoryScale, PointElement, LineElement);\n  const totalPar = datasets[0].data.reduce((acc, score) => acc + score, 0);\n  const totalScore = datasets.slice(1).reduce((acc, dataset) => {\n    return acc + dataset.data.reduce((sum, score) => sum + score, 0);\n  }, 0);\n  const chartData = {\n    labels: datasets[0].data.map((item, index) => `Hole ${index + 1}`),\n    datasets: datasets.map((dataset, index) => ({\n      label: dataset.label,\n      data: dataset.data,\n      borderColor: getLineColor(index),\n      borderWidth: 1,\n      fill: false\n    }))\n  };\n  const chartOptions = {\n    scales: {\n      y: {\n        type: 'linear',\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Scores'\n        },\n        ticks: {\n          stepSize: 1\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Holes'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Total Par: \", totalPar]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Total Score: \", totalScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get line color based on index\n_c = FrisbeeGolfGraph;\nconst getLineColor = index => {\n  const colors = ['red', 'blue', 'green', 'orange']; // Add more colors if needed\n  return colors[index % colors.length];\n};\nconst App = () => {\n  _s();\n  const [rounds, setRounds] = useState([{\n    label: 'Round 1',\n    dataset: {\n      label: 'Par',\n      data: [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n    }\n  }]);\n  const addRound = () => {\n    const newRoundLabel = `Round ${rounds.length + 1}`;\n    const newRound = {\n      label: newRoundLabel,\n      dataset: {\n        label: `Player ${rounds.length + 1}`,\n        data: [3, 3, 5, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 4, 2, 2, 3]\n      }\n    };\n    setRounds([...rounds, newRound]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ekeberg Frisbee Golf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), rounds.map((round, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: round.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FrisbeeGolfGraph, {\n        datasets: [round.dataset]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addRound,\n      children: \"Add Round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"PMLg5lv1npkf/nsDp5Q/8vdqxCg=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"FrisbeeGolfGraph\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","Line","LinearScale","CategoryScale","PointElement","LineElement","Chart","jsxDEV","_jsxDEV","FrisbeeGolfGraph","_ref","datasets","register","totalPar","data","reduce","acc","score","totalScore","slice","dataset","sum","chartData","labels","map","item","index","label","borderColor","getLineColor","borderWidth","fill","chartOptions","scales","y","type","beginAtZero","title","display","text","ticks","stepSize","x","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","colors","length","App","_s","rounds","setRounds","addRound","newRoundLabel","newRound","round","onClick","_c2","$RefreshReg$"],"sources":["/Users/admin/Documents/programming/graph/frisbee-graph/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from 'react-chartjs-2';\nimport { LinearScale, CategoryScale, PointElement, LineElement, Chart } from 'chart.js';\n\nconst FrisbeeGolfGraph = ({ datasets }) => {\n  Chart.register(LinearScale, CategoryScale, PointElement, LineElement);\n\n  const totalPar = datasets[0].data.reduce((acc, score) => acc + score, 0);\n  const totalScore = datasets.slice(1).reduce((acc, dataset) => {\n    return acc + dataset.data.reduce((sum, score) => sum + score, 0);\n  }, 0);\n\n  const chartData = {\n    labels: datasets[0].data.map((item, index) => `Hole ${index + 1}`),\n    datasets: datasets.map((dataset, index) => ({\n      label: dataset.label,\n      data: dataset.data,\n      borderColor: getLineColor(index),\n      borderWidth: 1,\n      fill: false,\n    })),\n  };\n\n  const chartOptions = {\n    scales: {\n      y: {\n        type: 'linear',\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Scores',\n        },\n        ticks: {\n          stepSize: 1,\n        },\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Holes',\n        },\n      },\n    },\n  };\n\n  return (\n    <div>\n      <div>Total Par: {totalPar}</div>\n      <div>Total Score: {totalScore}</div>\n      <Line data={chartData} options={chartOptions} />\n    </div>\n  );\n};\n\n\n// Helper function to get line color based on index\nconst getLineColor = (index) => {\n  const colors = ['red', 'blue', 'green', 'orange']; // Add more colors if needed\n  return colors[index % colors.length];\n};\n\nconst App = () => {\n  const [rounds, setRounds] = useState([\n    {\n      label: 'Round 1',\n      dataset: {\n        label: 'Par',\n        data: [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n      },\n    },\n  ]);\n\n  const addRound = () => {\n    const newRoundLabel = `Round ${rounds.length + 1}`;\n    const newRound = {\n      label: newRoundLabel,\n      dataset: {\n        label: `Player ${rounds.length + 1}`,\n        data: [3, 3, 5, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 4, 2, 2, 3],\n      },\n    };\n    setRounds([...rounds, newRound]);\n  };\n\n  return (\n    <div>\n      <h1>Ekeberg Frisbee Golf</h1>\n      {rounds.map((round, index) => (\n        <div key={index}>\n          <h2>{round.label}</h2>\n          <FrisbeeGolfGraph datasets={[round.dataset]} />\n        </div>\n      ))}\n      <button onClick={addRound}>Add Round</button>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}