{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/programming/graph/frisbee-graph/src/App.js\";\nimport React from 'react';\nimport 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from 'react-chartjs-2';\nimport { LinearScale, CategoryScale, PointElement, LineElement, Chart } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FrisbeeGolfGraph = _ref => {\n  let {\n    datasets,\n    onScoreChange\n  } = _ref;\n  Chart.register(LinearScale, CategoryScale, PointElement, LineElement);\n  const totalPar = datasets[0].data.reduce((acc, score) => acc + score, 0);\n  const totalScore = datasets.slice(1).reduce((acc, dataset) => {\n    return acc + dataset.data.reduce((sum, score) => sum + score, 0);\n  }, 0);\n  const handleScoreUpdate = (index, score) => {\n    const validatedScore = score < 1 ? 1 : score; // If score is lower than 1, set it to 1\n    onScoreChange(index, validatedScore);\n  };\n  const chartData = {\n    labels: datasets[0].data.map((item, index) => `Hole ${index + 1}`),\n    datasets: datasets.map((dataset, index) => ({\n      label: dataset.label,\n      data: dataset.data,\n      borderColor: getLineColor(index),\n      borderWidth: 1,\n      fill: false\n    }))\n  };\n  const chartOptions = {\n    scales: {\n      y: {\n        type: 'linear',\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Scores'\n        },\n        ticks: {\n          stepSize: 1\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Holes'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Total Par: \", totalPar]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Total Score: \", totalScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: datasets[1].data.slice(19).map((score, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: score,\n        onChange: e => handleScoreUpdate(index + 19, parseInt(e.target.value)),\n        min: 1 // Set the minimum value for the input field\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get line color based on index\n_c = FrisbeeGolfGraph;\nconst getLineColor = index => {\n  const colors = ['red', 'blue', 'green', 'orange']; // Add more colors if needed\n  return colors[index % colors.length];\n};\nconst App = () => {\n  const dataset1 = {\n    label: 'Par',\n    data: [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  };\n  const dataset2 = {\n    label: 'Player 2',\n    data: [3, 3, 5, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 4, 2, 2, 3]\n  };\n  const handleScoreChange = (index, score) => {\n    // Handle the score change for a specific hole\n    // You can update the state or perform any necessary operations here\n    console.log(`Score changed for hole ${index}: ${score}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ekeberg Frisbee Golf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FrisbeeGolfGraph, {\n      datasets: [dataset1, dataset2],\n      onScoreChange: handleScoreChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"FrisbeeGolfGraph\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","Line","LinearScale","CategoryScale","PointElement","LineElement","Chart","jsxDEV","_jsxDEV","FrisbeeGolfGraph","_ref","datasets","onScoreChange","register","totalPar","data","reduce","acc","score","totalScore","slice","dataset","sum","handleScoreUpdate","index","validatedScore","chartData","labels","map","item","label","borderColor","getLineColor","borderWidth","fill","chartOptions","scales","y","type","beginAtZero","title","display","text","ticks","stepSize","x","children","fileName","_jsxFileName","lineNumber","columnNumber","options","value","onChange","e","parseInt","target","min","_c","colors","length","App","dataset1","dataset2","handleScoreChange","console","log","_c2","$RefreshReg$"],"sources":["/Users/admin/Documents/programming/graph/frisbee-graph/src/App.js"],"sourcesContent":["import React from 'react';\nimport 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from 'react-chartjs-2';\nimport { LinearScale, CategoryScale, PointElement, LineElement, Chart } from 'chart.js';\n\nconst FrisbeeGolfGraph = ({ datasets, onScoreChange }) => {\n  Chart.register(LinearScale, CategoryScale, PointElement, LineElement);\n\n  const totalPar = datasets[0].data.reduce((acc, score) => acc + score, 0);\n  const totalScore = datasets.slice(1).reduce((acc, dataset) => {\n    return acc + dataset.data.reduce((sum, score) => sum + score, 0);\n  }, 0);\n\n  const handleScoreUpdate = (index, score) => {\n    const validatedScore = score < 1 ? 1 : score; // If score is lower than 1, set it to 1\n    onScoreChange(index, validatedScore);\n  };\n\n  const chartData = {\n    labels: datasets[0].data.map((item, index) => `Hole ${index + 1}`),\n    datasets: datasets.map((dataset, index) => ({\n      label: dataset.label,\n      data: dataset.data,\n      borderColor: getLineColor(index),\n      borderWidth: 1,\n      fill: false,\n    })),\n  };\n\n  const chartOptions = {\n    scales: {\n      y: {\n        type: 'linear',\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Scores',\n        },\n        ticks: {\n          stepSize: 1,\n        },\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Holes',\n        },\n      },\n    },\n  };\n\n  return (\n    <div>\n      <div>Total Par: {totalPar}</div>\n      <div>Total Score: {totalScore}</div>\n      <Line data={chartData} options={chartOptions} />\n      <div>\n        {datasets[1].data.slice(19).map((score, index) => (\n          <input\n            key={index}\n            type=\"number\"\n            value={score}\n            onChange={(e) => handleScoreUpdate(index + 19, parseInt(e.target.value))}\n            min={1} // Set the minimum value for the input field\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Helper function to get line color based on index\nconst getLineColor = (index) => {\n  const colors = ['red', 'blue', 'green', 'orange']; // Add more colors if needed\n  return colors[index % colors.length];\n};\n\nconst App = () => {\n  const dataset1 = {\n    label: 'Par',\n    data: [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n  };\n\n  const dataset2 = {\n    label: 'Player 2',\n    data: [3, 3, 5, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 4, 2, 2, 3],\n  };\n\n  const handleScoreChange = (index, score) => {\n    // Handle the score change for a specific hole\n    // You can update the state or perform any necessary operations here\n    console.log(`Score changed for hole ${index}: ${score}`);\n  };\n\n  return (\n    <div>\n      <h1>Ekeberg Frisbee Golf</h1>\n      <FrisbeeGolfGraph datasets={[dataset1, dataset2]} onScoreChange={handleScoreChange} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}